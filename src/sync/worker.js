"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const worker_threads_1 = require("worker_threads");
// https://giuseppegurgone.com/synchronizing-async-functions/
worker_threads_1.parentPort === null || worker_threads_1.parentPort === void 0 ? void 0 : worker_threads_1.parentPort.addListener("message", async ({ signal, port, args }) => {
    const file = args[args.length - 1];
    console.log(`Class file to use: ${file}`);
    const className = args[args.length - 2];
    const asyncProcess = require(file);
    console.log(`Class file loaded: ${file}`);
    // This is the async function that we want to run "synchronously"
    const result = await new asyncProcess[className]().runAsync(args.slice(0, args.length - 2));
    // Post the result to the main thread before unlocking "signal"
    port.postMessage({ result });
    port.close();
    // Change the value of signal[0] to 1
    Atomics.store(signal, 0, 1);
    // This will unlock the main thread when we notify it
    Atomics.notify(signal, 0, Infinity);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid29ya2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQTRDO0FBRTVDLDZEQUE2RDtBQUM3RCwyQkFBVSxhQUFWLDJCQUFVLHVCQUFWLDJCQUFVLENBQUUsV0FBVyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBTyxFQUFFLEVBQUU7SUFDckUsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUN6QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUN2QyxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUV6QyxpRUFBaUU7SUFDakUsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUYsK0RBQStEO0lBQy9ELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNiLHFDQUFxQztJQUNyQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUIscURBQXFEO0lBQ3JELE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN4QyxDQUFDLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJlbnRQb3J0IH0gZnJvbSBcIndvcmtlcl90aHJlYWRzXCI7XG5cbi8vIGh0dHBzOi8vZ2l1c2VwcGVndXJnb25lLmNvbS9zeW5jaHJvbml6aW5nLWFzeW5jLWZ1bmN0aW9ucy9cbnBhcmVudFBvcnQ/LmFkZExpc3RlbmVyKFwibWVzc2FnZVwiLCBhc3luYyAoeyBzaWduYWwsIHBvcnQsIGFyZ3MgfTogYW55KSA9PiB7XG4gICAgY29uc3QgZmlsZSA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXVxuICAgIGNvbnNvbGUubG9nKGBDbGFzcyBmaWxlIHRvIHVzZTogJHtmaWxlfWApXG4gICAgY29uc3QgY2xhc3NOYW1lID0gYXJnc1thcmdzLmxlbmd0aCAtIDJdXG4gICAgY29uc3QgYXN5bmNQcm9jZXNzID0gcmVxdWlyZShmaWxlKTtcbiAgICBjb25zb2xlLmxvZyhgQ2xhc3MgZmlsZSBsb2FkZWQ6ICR7ZmlsZX1gKVxuXG4gICAgLy8gVGhpcyBpcyB0aGUgYXN5bmMgZnVuY3Rpb24gdGhhdCB3ZSB3YW50IHRvIHJ1biBcInN5bmNocm9ub3VzbHlcIlxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5ldyBhc3luY1Byb2Nlc3NbY2xhc3NOYW1lXSgpLnJ1bkFzeW5jKGFyZ3Muc2xpY2UoMCAsYXJncy5sZW5ndGggLSAyKSk7XG4gICAgLy8gUG9zdCB0aGUgcmVzdWx0IHRvIHRoZSBtYWluIHRocmVhZCBiZWZvcmUgdW5sb2NraW5nIFwic2lnbmFsXCJcbiAgICBwb3J0LnBvc3RNZXNzYWdlKHsgcmVzdWx0IH0pO1xuICAgIHBvcnQuY2xvc2UoKTtcbiAgICAvLyBDaGFuZ2UgdGhlIHZhbHVlIG9mIHNpZ25hbFswXSB0byAxXG4gICAgQXRvbWljcy5zdG9yZShzaWduYWwsIDAsIDEpO1xuICAgIC8vIFRoaXMgd2lsbCB1bmxvY2sgdGhlIG1haW4gdGhyZWFkIHdoZW4gd2Ugbm90aWZ5IGl0XG4gICAgQXRvbWljcy5ub3RpZnkoc2lnbmFsLCAwLCBJbmZpbml0eSk7XG59KTsiXX0=